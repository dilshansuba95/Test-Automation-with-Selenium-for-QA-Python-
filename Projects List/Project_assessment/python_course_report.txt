Week 1: Introduction to Python and Data Types & Operators : In the first week, participants delve into the fundamental aspects of Python, gaining an overview of the language, setting up the development environment, understanding Python syntax, and exploring variables. The week also covers essential data types, including strings, integers, floats, and booleans, along with basic operators for arithmetic, comparison, and assignment.
Week 2: Control Flow : Week two focuses on control flow structures in Python. Participants learn about conditional statements such as if, elif, and else, as well as looping constructs like for and while. The week also covers break and continue statements, providing a solid foundation for effective control flow in Python programs.
Week 3: Basic Data Structures (Lists, Tuples) : Building on the basics, week three introduces basic data structures in Python—lists and tuples. Participants explore the definition, indexing, slicing, and methods associated with lists, along with understanding the purpose and usage of tuples.
Week 4: Advanced Data Structures (Sets, Dictionaries) : The fourth week delves into more advanced data structures, namely sets and dictionaries. Participants understand the definition, methods, and use cases of sets and dictionaries, further enhancing their ability to organize and manipulate data efficiently.
Week 5: Functions : Week five revolves around functions in Python. Participants learn to define and call functions, understand the concept of arguments and return values, and explore the scope of local and global variables within functions.
Week 6: Error Handling and File I/O : Participants are introduced to error handling and file input/output operations in week six. The curriculum covers understanding exceptions, utilizing try, except, and finally blocks, and reading from and writing to files in Python.
Week 7: Modules and Packages : The seventh week focuses on modular programming in Python. Participants learn the importance of importing modules, explore the Python Standard Library, and gain an understanding of packages for efficient code organization.
Week 8: Introduction to Object-Oriented Programming : Week eight marks the introduction to object-oriented programming (OOP) in Python. Participants understand the concepts of classes and objects, define methods within classes, and explore the significance of the init method and the 'self' keyword.
Week 9: Advanced Object-Oriented Programming : Building on the foundations of OOP, week nine delves into advanced concepts such as inheritance, polymorphism, and encapsulation, providing participants with a deeper understanding of object-oriented principles.
Week 10: Intermediate Python Topics (List Comprehensions, Generators) : Week ten covers intermediate Python topics, specifically list comprehensions and generators. Participants learn to leverage concise list comprehensions and understand the concept of generators using the 'yield' keyword.
Week 11: Intermediate Python Topics (Iterators, Decorators) : Continuing with intermediate topics, week eleven explores iterators and decorators in Python. Participants gain insights into the functioning of iterators and understand the definition and use cases of decorators in Python programming.
Week 12: Project Week : The final week is dedicated to a practical application of the acquired knowledge. Participants engage in project planning and design, coding, debugging, and conclude the course with a project presentation, applying their skills to real-world scenarios. Upon successful completion, participants receive an online participation certificate and a globally recognized Digital Badge after a practical exam, signifying their expertise in Python programming.
